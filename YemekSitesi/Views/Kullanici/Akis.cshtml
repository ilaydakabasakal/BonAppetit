@model List<YemekSitesi.Models.Tables.tbl_tarif>

@using YemekSitesi.Models.Tables
@using YemekSitesi.Models
@{
    var db = new DatabaseContext();
    tbl_uye kullanici = null; // kullanici değişkenini dışarıda tanımlayın ve null olarak başlatın
}
@{
    if (User.Identity.IsAuthenticated)
    {
        string userName = User.Identity.Name; // Kullanıcı adını al
        kullanici = db.uyeTable.FirstOrDefault(u => u.uyeAd == userName); // Kullanıcı adına göre kullanıcıyı bul
    }
}


@{
    ViewBag.Title = "Akis";
    Layout = "~/Views/Shared/Akis_Favoriler.cshtml";
}





@*<style>
        .card {
            width: 280px;
            margin-right: 10px;
            margin-bottom: 20px;
            position: relative;
            background-color: transparent;
            border-color: transparent;
        }

        .card-img-top {
            width: 100%;
            height: 300px; /* İstenen yükseklik değeri */
            object-fit: cover; /* Resmi sığdırma modu */
        }

        .heart-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #d54315; /* Yuvarlak butonun rengi */
            border: none;
            padding: 0;
            width: 40px;
            height: 40px;
            border-radius: 50%; /* Daire şeklinde buton */
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .heart-icon {
            stroke: white;
            stroke-width: 2px;
            fill: none; /* Kalp simgesi rengi */
            width: 20px;
            height: 20px;
        }

        .text-muted span {
            font-size: 14px;
        }

        .text-muted .stars {
            color: #d54315;
            font-size: 25px; /* Yıldız rengi */
        }

        .card-title a {
            text-decoration: none;
            color: inherit;
            transition: text-decoration 0.3s, color 0.3s;
            font-family: CopperPot, Helvetica, sans-serif;
            border-bottom: 1px solid transparent; /* Alt çizginin varsayılan durumu */
        }

            .card-title a:hover {
                text-decoration: none;
                color: black; /* Üzerine gelindiğinde metin rengi */
                border-bottom-color: #d54315; /* Alt çizginin rengi */
            }

        #scroll-to-top-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999;
            width: 48px;
            height: 48px;
            background-color: transparent;
            border: none;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #scroll-to-top-btn:hover {
                background-color: rgba(0, 0, 0, 0.1);
            }

            #scroll-to-top-btn svg {
                width: 24px;
                height: 24px;
                fill: #000000;
                transform: rotate(180deg);
            }
    </style>*@




<br />
<br />
<br />
<br />


<div class="container">
    <div class="row">
        @foreach (var akislar in Model)
        {
            <div class="col-md-3">
                <div class="card">

                    @{
                        bool begenilmisMi = false;
                        if (kullanici != null)
                        {
                            begenilmisMi = db.begeniTABLE.Any(b => b.tarifID == akislar.tarifID && b.uyeID == kullanici.uyeID);
                                        <button data-tarifid="@akislar.tarifID" data-uyeid="@kullanici.uyeID" class="heart-button" data-begenmismi="@begenilmisMi">
                                            @if (begenilmisMi)
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                     class="heart-icon"
                                                     width="24"
                                                     height="24"
                                                     viewBox="0 0 24 24"
                                                     style="fill: white">
                                                    <path fill-rule="evenodd"
                                                          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                     class="heart-icon"
                                                     width="24"
                                                     height="24"
                                                     viewBox="0 0 24 24"
                                                     style="fill: red">
                                                    <path fill-rule="evenodd"
                                                          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                                </svg>
                                            }
                                        </button>
                        }
                    }

                    <img src="@Url.Content(akislar.resim)"
                         class="card-img-top"
                         alt="Resim" />
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="yemek_detay.html">@akislar.baslik</a>
                        </h5>
                        <p class="card-text">
                            @if (akislar.kategori != null)
                            {
                                <span> @akislar.kategori.kategoriAd</span>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </p>
                        <p class="card-text">
                            <small class="text-muted">
                                <span class="stars">★★★★☆</span> <span>15 değerlendirme</span>
                            </small>
                        </p>
                    </div>
                </div>
            </div>
        }
        <!-- Diğer kartlar buraya eklenecek -->

    </div>
</div>

<button id="scroll-to-top-btn">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48">
        <path fill="none" d="M0 0h24v24H0z" />
        <path d="M12 17.27L18.18 11 16.77 9.59 12 14.36 7.23 9.59 5.82 11z" />
    </svg>
</button>

<script>
    // Kalp simgesine tıklama olayını dinle
    //document.querySelectorAll(".heart-button").forEach((button) => {
    //    button.addEventListener("click", function () {
    //        // Kalp simgesinin rengini değiştir
    //        const heartIcon = this.querySelector(".heart-icon");
    //        if (heartIcon.style.fill === "none") {
    //            heartIcon.style.fill = "white";
    //        } else {
    //            heartIcon.style.fill = "none";
    //        }
    //    });
    //});
    document.querySelectorAll(".heart-button").forEach((button) => {
        button.addEventListener("click", function () {
            const heartIcon = this.querySelector(".heart-icon");
            if (heartIcon.style.fill === "none") {
                // Tarifin ID'sini al
                const tarifID = button.getAttribute('data-tarifid');
                const uyeID = button.getAttribute('data-uyeid');
                const begenmis = button.getAttribute('data-begenmismi');
                // Kullanıcının ID'sini al (örnek olarak, varsayılan olarak 1 kullanıcı ID'si)
                //const uyeID = 3; // Bu kısmı gerçek kullanıcı ID'siyle değiştirmelisiniz buraya  yukarıdaki tarif id için yazılanı yazsam gerçek id için olur mu 183 satırda var aslında yorum satırına aldım çakışmaması için oturum sisteminizi yaptığınızda bunu silersin onu aktif edersin sadece element tarafında idyi yansıtırsın olur element tarafı neresi
                // Ajax isteği gönder
                console.log(begenmis);
                if (begenmis == "True") {
                    fetch('/Home/BegeniSil', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ tarifID: tarifID, uyeID: uyeID })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            button.setAttribute('data-begenmismi', 'False');
                            console.log(heartIcon)
                            heartIcon.style.fill = "none";
                            console.log(data);
                        })
                        .catch(error => {
                            console.error('There has been a problem with your fetch operation:', error);
                        });
                } else {
                    fetch('/Home/BegeniEkle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ tarifID: tarifID, uyeID: uyeID })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            button.setAttribute('data-begenmismi', 'True');
                            console.log(heartIcon)
                            heartIcon.style.fill = "white";
                            console.log(data);
                        })
                        .catch(error => {
                            console.error('There has been a problem with your fetch operation:', error);
                        });
                }
            } else {
                heartIcon.style.fill = "none";
            }
        });
    });


    // Scroll-to-top button element
    const scrollToTopBtn = document.getElementById("scroll-to-top-btn");

    // When the document is scrolled, show or hide the scroll-to-top button
    window.addEventListener("scroll", () => {
        if (
            document.body.scrollTop > 20 ||
            document.documentElement.scrollTop > 20
        ) {
            scrollToTopBtn.style.display = "block";
        } else {
            scrollToTopBtn.style.display = "none";
        }
    });

    // When the button is clicked, scroll to the top of the document
    scrollToTopBtn.addEventListener("click", () => {
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE, and Opera
    });
</script>



